= louisville

First of all, sorry for the pun.

Louisville is a small library for manipulating strings, mostly to normalize them.

Requiring this gem adds several methods to String, the most important ones are:

String#asciify

Replaces all non-ASCII chars with their nearest equivalent, or removes them.

String#normalize

Does the same as asciify, and also does a lot of wrangling to get a normalized string that serves as a canonical representation
of the input. It replaces abbreviations like St. or St or Snt to Sankt, moves post-fixed "the"s around, and other stuff.
The result is a good base to compare names of places and other things that come from different sources - most of the time,
the normalized strings will be identical.

At Travel IQ, this is used to compare hotel names. It also makes a great starting point for autocompleter data - save
a normalized version of the items in the DB, and do the queries against the DB with the normalized user input string.
It's also useful, of all things, for generating slugs !

The focus is definitely on german text - the default replacements and abbreviations are in german. Feel free to contribute !

== Authors

Bryan JJ Buckley (bjjb.org), Martin Tepper (monogreen.de)

== Contributing to louisville
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 www.travel-iq.com. See LICENSE.txt for
further details.

